# custom ~/.bash_aliases

# use color
alias ls="ls --color=auto"
alias dir="dir --color=auto"
alias grep="grep --color=auto"
alias dmesg='dmesg --color'

# extended listing
alias ll='ls -halF'
alias la='ls -A'
alias l='ls -CF'

# ensure remove confirmations
alias rm='rm -i'

# human readable df
alias df='df -h'

# ignore common typos
alias naon='nano'

# docker
alias manifest-tool="docker run --rm weshigbee/manifest-tool"

# ROS related
alias cm=$'eval \'cd "$ROS_WORKSPACE"; catkin_make\''
alias cb=$'eval \'cd "$ROS_WORKSPACE"; catkin build --cmake-args -DPYTHON_VERSION=3.6\''
alias ss=$'eval \'source "$ROS_WORKSPACE"/devel/setup.bash\''
alias tl='rostopic list'
alias te='rostopic echo'
alias th='rostopic hz'
alias sl='rosservice list'
alias sc='rosservice call'
alias mi='rosmsg info'
alias si='rossrv info'

# git related functions
# from https://www.phillip-kruger.com/post/some_bash_functions_for_git/

function clone {

    if [ $# -eq 0 ]; then
        echo "Please enter repo name or full url:";
        read repo;
        clone $repo;
    elif [[ $1 == --help ]] || [[ $1 == --h ]] || [[ $1 == --? ]]; then
        echo "This will clone a git repo.";
        echo "";
        echo "Option 1: You can just provide the name, eg:";
        echo "$ clone membership";
        echo "This will do: git clone https://github.com/DavidGogh/membership.git";
        echo "";
        echo "Option 2: Provide the full URL";
        echo "$ clone https://github.com/smallrye/smallrye-rest-client.git";
        echo "This will do: git clone https://github.com/smallrye/smallrye-rest-client.git";
    else
        if [[ $1 == https://* ]] || [[ $1 == git://* ]] || [[ $1 == ssh://* ]] ; then
            URL=$1;
        else
            URL='https://github.com/DavidGogh/'$1'.git';
        fi

        echo git clone "$URL";
        git clone "$URL";
    fi
}

# If you contribute to projects, and you are working against your own fork, this is a handy way to keep you fork in sync with changes in the upstream master.

function sync {

    if git remote -v | grep -q 'upstream'; then
        echo "upstream exist";
    else
        echo "Please enter the upstream git url:";
        read url;
        git remote add upstream "$url"
    fi

    git remote -v
    git fetch upstream
    git pull upstream master
    git checkout master
    git rebase upstream/master
}

# Normal commit, but adding -s to include your signature.
function commit {

    if [ $# -eq 0 ]; then
        echo "Please enter a commit message:";
        read msg;
        commit "$msg";
    elif [[ $1 == --help ]] || [[ $1 == --h ]] || [[ $1 == --? ]]; then
        echo "This will commit changes to a local git repo, eg:";
        echo "$ commit 'some changes made'";
        echo "This will do: git commit -s -m 'some changes made'";
    else
        echo git commit -s -a -m "$1"
        git commit -s -a -m "$1";
    fi
}
